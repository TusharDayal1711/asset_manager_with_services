// Code generated by MockGen. DO NOT EDIT.
// Source: providers/providers.go

// Package userservice is a generated GoMock package.
package providers

import (
	models "asset/models"
	context "context"
	http "net/http"
	reflect "reflect"
	time "time"

	auth "firebase.google.com/go/v4/auth"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	zap "go.uber.org/zap"
)

// MockAuthMiddlewareService is a mock of AuthMiddlewareService interface.
type MockAuthMiddlewareService struct {
	ctrl     *gomock.Controller
	recorder *MockAuthMiddlewareServiceMockRecorder
}

// MockAuthMiddlewareServiceMockRecorder is the mock recorder for MockAuthMiddlewareService.
type MockAuthMiddlewareServiceMockRecorder struct {
	mock *MockAuthMiddlewareService
}

// NewMockAuthMiddlewareService creates a new mock instance.
func NewMockAuthMiddlewareService(ctrl *gomock.Controller) *MockAuthMiddlewareService {
	mock := &MockAuthMiddlewareService{ctrl: ctrl}
	mock.recorder = &MockAuthMiddlewareServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthMiddlewareService) EXPECT() *MockAuthMiddlewareServiceMockRecorder {
	return m.recorder
}

// GenerateJWT mocks base method.
func (m *MockAuthMiddlewareService) GenerateJWT(userID string, roles []string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateJWT", userID, roles)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateJWT indicates an expected call of GenerateJWT.
func (mr *MockAuthMiddlewareServiceMockRecorder) GenerateJWT(userID, roles interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateJWT", reflect.TypeOf((*MockAuthMiddlewareService)(nil).GenerateJWT), userID, roles)
}

// GenerateRefreshToken mocks base method.
func (m *MockAuthMiddlewareService) GenerateRefreshToken(userID string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateRefreshToken", userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateRefreshToken indicates an expected call of GenerateRefreshToken.
func (mr *MockAuthMiddlewareServiceMockRecorder) GenerateRefreshToken(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateRefreshToken", reflect.TypeOf((*MockAuthMiddlewareService)(nil).GenerateRefreshToken), userID)
}

// GetUserAndRolesFromContext mocks base method.
func (m *MockAuthMiddlewareService) GetUserAndRolesFromContext(r *http.Request) (string, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAndRolesFromContext", r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetUserAndRolesFromContext indicates an expected call of GetUserAndRolesFromContext.
func (mr *MockAuthMiddlewareServiceMockRecorder) GetUserAndRolesFromContext(r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAndRolesFromContext", reflect.TypeOf((*MockAuthMiddlewareService)(nil).GetUserAndRolesFromContext), r)
}

// JWTAuthMiddleware mocks base method.
func (m *MockAuthMiddlewareService) JWTAuthMiddleware() func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JWTAuthMiddleware")
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// JWTAuthMiddleware indicates an expected call of JWTAuthMiddleware.
func (mr *MockAuthMiddlewareServiceMockRecorder) JWTAuthMiddleware() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JWTAuthMiddleware", reflect.TypeOf((*MockAuthMiddlewareService)(nil).JWTAuthMiddleware))
}

// RequireRole mocks base method.
func (m *MockAuthMiddlewareService) RequireRole(roles ...models.Role) func(http.Handler) http.Handler {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range roles {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RequireRole", varargs...)
	ret0, _ := ret[0].(func(http.Handler) http.Handler)
	return ret0
}

// RequireRole indicates an expected call of RequireRole.
func (mr *MockAuthMiddlewareServiceMockRecorder) RequireRole(roles ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireRole", reflect.TypeOf((*MockAuthMiddlewareService)(nil).RequireRole), roles...)
}

// MockConfigProvider is a mock of ConfigProvider interface.
type MockConfigProvider struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderMockRecorder
}

// MockConfigProviderMockRecorder is the mock recorder for MockConfigProvider.
type MockConfigProviderMockRecorder struct {
	mock *MockConfigProvider
}

// NewMockConfigProvider creates a new mock instance.
func NewMockConfigProvider(ctrl *gomock.Controller) *MockConfigProvider {
	mock := &MockConfigProvider{ctrl: ctrl}
	mock.recorder = &MockConfigProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProvider) EXPECT() *MockConfigProviderMockRecorder {
	return m.recorder
}

// GetDatabaseString mocks base method.
func (m *MockConfigProvider) GetDatabaseString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDatabaseString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDatabaseString indicates an expected call of GetDatabaseString.
func (mr *MockConfigProviderMockRecorder) GetDatabaseString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDatabaseString", reflect.TypeOf((*MockConfigProvider)(nil).GetDatabaseString))
}

// GetServerPort mocks base method.
func (m *MockConfigProvider) GetServerPort() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerPort")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServerPort indicates an expected call of GetServerPort.
func (mr *MockConfigProviderMockRecorder) GetServerPort() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerPort", reflect.TypeOf((*MockConfigProvider)(nil).GetServerPort))
}

// LoadEnv mocks base method.
func (m *MockConfigProvider) LoadEnv() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadEnv")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadEnv indicates an expected call of LoadEnv.
func (mr *MockConfigProviderMockRecorder) LoadEnv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadEnv", reflect.TypeOf((*MockConfigProvider)(nil).LoadEnv))
}

// MockDBProvider is a mock of DBProvider interface.
type MockDBProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDBProviderMockRecorder
}

// MockDBProviderMockRecorder is the mock recorder for MockDBProvider.
type MockDBProviderMockRecorder struct {
	mock *MockDBProvider
}

// NewMockDBProvider creates a new mock instance.
func NewMockDBProvider(ctrl *gomock.Controller) *MockDBProvider {
	mock := &MockDBProvider{ctrl: ctrl}
	mock.recorder = &MockDBProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBProvider) EXPECT() *MockDBProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBProvider)(nil).Close))
}

// DB mocks base method.
func (m *MockDBProvider) DB() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockDBProviderMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockDBProvider)(nil).DB))
}

// MockZapLoggerProvider is a mock of ZapLoggerProvider interface.
type MockZapLoggerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockZapLoggerProviderMockRecorder
}

// MockZapLoggerProviderMockRecorder is the mock recorder for MockZapLoggerProvider.
type MockZapLoggerProviderMockRecorder struct {
	mock *MockZapLoggerProvider
}

// NewMockZapLoggerProvider creates a new mock instance.
func NewMockZapLoggerProvider(ctrl *gomock.Controller) *MockZapLoggerProvider {
	mock := &MockZapLoggerProvider{ctrl: ctrl}
	mock.recorder = &MockZapLoggerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockZapLoggerProvider) EXPECT() *MockZapLoggerProviderMockRecorder {
	return m.recorder
}

// GetLogger mocks base method.
func (m *MockZapLoggerProvider) GetLogger() *zap.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*zap.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockZapLoggerProviderMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockZapLoggerProvider)(nil).GetLogger))
}

// InitLogger mocks base method.
func (m *MockZapLoggerProvider) InitLogger() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "InitLogger")
}

// InitLogger indicates an expected call of InitLogger.
func (mr *MockZapLoggerProviderMockRecorder) InitLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitLogger", reflect.TypeOf((*MockZapLoggerProvider)(nil).InitLogger))
}

// SyncLogger mocks base method.
func (m *MockZapLoggerProvider) SyncLogger() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SyncLogger")
}

// SyncLogger indicates an expected call of SyncLogger.
func (mr *MockZapLoggerProviderMockRecorder) SyncLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncLogger", reflect.TypeOf((*MockZapLoggerProvider)(nil).SyncLogger))
}

// MockFirebaseProvider is a mock of FirebaseProvider interface.
type MockFirebaseProvider struct {
	ctrl     *gomock.Controller
	recorder *MockFirebaseProviderMockRecorder
}

// MockFirebaseProviderMockRecorder is the mock recorder for MockFirebaseProvider.
type MockFirebaseProviderMockRecorder struct {
	mock *MockFirebaseProvider
}

// NewMockFirebaseProvider creates a new mock instance.
func NewMockFirebaseProvider(ctrl *gomock.Controller) *MockFirebaseProvider {
	mock := &MockFirebaseProvider{ctrl: ctrl}
	mock.recorder = &MockFirebaseProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirebaseProvider) EXPECT() *MockFirebaseProviderMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockFirebaseProvider) CreateUser(ctx context.Context, email string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, email)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockFirebaseProviderMockRecorder) CreateUser(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockFirebaseProvider)(nil).CreateUser), ctx, email)
}

// DeleteAuthUser mocks base method.
func (m *MockFirebaseProvider) DeleteAuthUser(ctx context.Context, uid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthUser", ctx, uid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthUser indicates an expected call of DeleteAuthUser.
func (mr *MockFirebaseProviderMockRecorder) DeleteAuthUser(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthUser", reflect.TypeOf((*MockFirebaseProvider)(nil).DeleteAuthUser), ctx, uid)
}

// GetAuthUserID mocks base method.
func (m *MockFirebaseProvider) GetAuthUserID(ctx context.Context, email string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthUserID", ctx, email)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthUserID indicates an expected call of GetAuthUserID.
func (mr *MockFirebaseProviderMockRecorder) GetAuthUserID(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthUserID", reflect.TypeOf((*MockFirebaseProvider)(nil).GetAuthUserID), ctx, email)
}

// GetUserByEmail mocks base method.
func (m *MockFirebaseProvider) GetUserByEmail(ctx context.Context, email string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockFirebaseProviderMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockFirebaseProvider)(nil).GetUserByEmail), ctx, email)
}

// GetUserByUID mocks base method.
func (m *MockFirebaseProvider) GetUserByUID(ctx context.Context, uid string) (*auth.UserRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByUID", ctx, uid)
	ret0, _ := ret[0].(*auth.UserRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByUID indicates an expected call of GetUserByUID.
func (mr *MockFirebaseProviderMockRecorder) GetUserByUID(ctx, uid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByUID", reflect.TypeOf((*MockFirebaseProvider)(nil).GetUserByUID), ctx, uid)
}

// VerifyIDToken mocks base method.
func (m *MockFirebaseProvider) VerifyIDToken(ctx context.Context, idToken string) (*auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifyIDToken", ctx, idToken)
	ret0, _ := ret[0].(*auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// VerifyIDToken indicates an expected call of VerifyIDToken.
func (mr *MockFirebaseProviderMockRecorder) VerifyIDToken(ctx, idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifyIDToken", reflect.TypeOf((*MockFirebaseProvider)(nil).VerifyIDToken), ctx, idToken)
}

// MockRedisProvider is a mock of RedisProvider interface.
type MockRedisProvider struct {
	ctrl     *gomock.Controller
	recorder *MockRedisProviderMockRecorder
}

// MockRedisProviderMockRecorder is the mock recorder for MockRedisProvider.
type MockRedisProviderMockRecorder struct {
	mock *MockRedisProvider
}

// NewMockRedisProvider creates a new mock instance.
func NewMockRedisProvider(ctrl *gomock.Controller) *MockRedisProvider {
	mock := &MockRedisProvider{ctrl: ctrl}
	mock.recorder = &MockRedisProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRedisProvider) EXPECT() *MockRedisProviderMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockRedisProvider) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockRedisProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRedisProvider)(nil).Close))
}

// Get mocks base method.
func (m *MockRedisProvider) Get(ctx context.Context, key string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRedisProviderMockRecorder) Get(ctx, key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRedisProvider)(nil).Get), ctx, key)
}

// Ping mocks base method.
func (m *MockRedisProvider) Ping(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ping", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ping indicates an expected call of Ping.
func (mr *MockRedisProviderMockRecorder) Ping(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ping", reflect.TypeOf((*MockRedisProvider)(nil).Ping), ctx)
}

// Set mocks base method.
func (m *MockRedisProvider) Set(ctx context.Context, key string, value interface{}, expiration time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, key, value, expiration)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockRedisProviderMockRecorder) Set(ctx, key, value, expiration interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockRedisProvider)(nil).Set), ctx, key, value, expiration)
}
