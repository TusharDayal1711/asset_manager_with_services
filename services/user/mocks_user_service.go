// Code generated by MockGen. DO NOT EDIT.
// Source: services/user/user_service.go

// Package userservice is a generated GoMock package.
package userservice

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// ChangeUserRole mocks base method.
func (m *MockUserService) ChangeUserRole(ctx context.Context, req UpdateUserRoleReq, adminID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeUserRole", ctx, req, adminID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeUserRole indicates an expected call of ChangeUserRole.
func (mr *MockUserServiceMockRecorder) ChangeUserRole(ctx, req, adminID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeUserRole", reflect.TypeOf((*MockUserService)(nil).ChangeUserRole), ctx, req, adminID)
}

// CreateFirstAdmin mocks base method.
func (m *MockUserService) CreateFirstAdmin() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirstAdmin")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CreateFirstAdmin indicates an expected call of CreateFirstAdmin.
func (mr *MockUserServiceMockRecorder) CreateFirstAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirstAdmin", reflect.TypeOf((*MockUserService)(nil).CreateFirstAdmin))
}

// DeleteUser mocks base method.
func (m *MockUserService) DeleteUser(ctx context.Context, userID uuid.UUID, managerRole string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", ctx, userID, managerRole)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockUserServiceMockRecorder) DeleteUser(ctx, userID, managerRole interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockUserService)(nil).DeleteUser), ctx, userID, managerRole)
}

// FirebaseUserRegistration mocks base method.
func (m *MockUserService) FirebaseUserRegistration(ctx context.Context, idToken string) (*FirebaseRegistrationResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FirebaseUserRegistration", ctx, idToken)
	ret0, _ := ret[0].(*FirebaseRegistrationResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FirebaseUserRegistration indicates an expected call of FirebaseUserRegistration.
func (mr *MockUserServiceMockRecorder) FirebaseUserRegistration(ctx, idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FirebaseUserRegistration", reflect.TypeOf((*MockUserService)(nil).FirebaseUserRegistration), ctx, idToken)
}

// GetDashboard mocks base method.
func (m *MockUserService) GetDashboard(ctx context.Context, userID uuid.UUID) (UserDashboardRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDashboard", ctx, userID)
	ret0, _ := ret[0].(UserDashboardRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDashboard indicates an expected call of GetDashboard.
func (mr *MockUserServiceMockRecorder) GetDashboard(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDashboard", reflect.TypeOf((*MockUserService)(nil).GetDashboard), ctx, userID)
}

// GetEmployeeTimeline mocks base method.
func (m *MockUserService) GetEmployeeTimeline(ctx context.Context, userID uuid.UUID) ([]UserTimelineRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeeTimeline", ctx, userID)
	ret0, _ := ret[0].([]UserTimelineRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeeTimeline indicates an expected call of GetEmployeeTimeline.
func (mr *MockUserServiceMockRecorder) GetEmployeeTimeline(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeeTimeline", reflect.TypeOf((*MockUserService)(nil).GetEmployeeTimeline), ctx, userID)
}

// GetEmployeesWithFilters mocks base method.
func (m *MockUserService) GetEmployeesWithFilters(ctx context.Context, filter EmployeeFilter) ([]EmployeeResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmployeesWithFilters", ctx, filter)
	ret0, _ := ret[0].([]EmployeeResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmployeesWithFilters indicates an expected call of GetEmployeesWithFilters.
func (mr *MockUserServiceMockRecorder) GetEmployeesWithFilters(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmployeesWithFilters", reflect.TypeOf((*MockUserService)(nil).GetEmployeesWithFilters), ctx, filter)
}

// GoogleAuth mocks base method.
func (m *MockUserService) GoogleAuth(ctx context.Context, idToken string) (uuid.UUID, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GoogleAuth", ctx, idToken)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GoogleAuth indicates an expected call of GoogleAuth.
func (mr *MockUserServiceMockRecorder) GoogleAuth(ctx, idToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GoogleAuth", reflect.TypeOf((*MockUserService)(nil).GoogleAuth), ctx, idToken)
}

// PublicRegister mocks base method.
func (m *MockUserService) PublicRegister(ctx context.Context, req PublicUserReq) (uuid.UUID, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicRegister", ctx, req)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PublicRegister indicates an expected call of PublicRegister.
func (mr *MockUserServiceMockRecorder) PublicRegister(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicRegister", reflect.TypeOf((*MockUserService)(nil).PublicRegister), ctx, req)
}

// RegisterEmployeeByManager mocks base method.
func (m *MockUserService) RegisterEmployeeByManager(ctx context.Context, req ManagerRegisterReq, managerID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterEmployeeByManager", ctx, req, managerID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterEmployeeByManager indicates an expected call of RegisterEmployeeByManager.
func (mr *MockUserServiceMockRecorder) RegisterEmployeeByManager(ctx, req, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterEmployeeByManager", reflect.TypeOf((*MockUserService)(nil).RegisterEmployeeByManager), ctx, req, managerID)
}

// UpdateEmployee mocks base method.
func (m *MockUserService) UpdateEmployee(ctx context.Context, req UpdateEmployeeReq, managerID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployee", ctx, req, managerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployee indicates an expected call of UpdateEmployee.
func (mr *MockUserServiceMockRecorder) UpdateEmployee(ctx, req, managerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployee", reflect.TypeOf((*MockUserService)(nil).UpdateEmployee), ctx, req, managerID)
}

// UserLogin mocks base method.
func (m *MockUserService) UserLogin(ctx context.Context, req PublicUserReq) (uuid.UUID, string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", ctx, req)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockUserServiceMockRecorder) UserLogin(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockUserService)(nil).UserLogin), ctx, req)
}
