// Code generated by MockGen. DO NOT EDIT.
// Source: services/user/user_repository.go

// Package userservice is a generated GoMock package.
package userservice

import (
	providers "asset/providers"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	sqlx "github.com/jmoiron/sqlx"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// CreateFirebaseUser mocks base method.
func (m *MockUserRepository) CreateFirebaseUser(ctx context.Context, name, email string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFirebaseUser", ctx, name, email)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFirebaseUser indicates an expected call of CreateFirebaseUser.
func (mr *MockUserRepositoryMockRecorder) CreateFirebaseUser(ctx, name, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFirebaseUser", reflect.TypeOf((*MockUserRepository)(nil).CreateFirebaseUser), ctx, name, email)
}

// CreateNewEmployee mocks base method.
func (m *MockUserRepository) CreateNewEmployee(ctx context.Context, tx *sqlx.Tx, req ManagerRegisterReq, managerUUID uuid.UUID) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewEmployee", ctx, tx, req, managerUUID)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNewEmployee indicates an expected call of CreateNewEmployee.
func (mr *MockUserRepositoryMockRecorder) CreateNewEmployee(ctx, tx, req, managerUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewEmployee", reflect.TypeOf((*MockUserRepository)(nil).CreateNewEmployee), ctx, tx, req, managerUUID)
}

// DeleteUserByID mocks base method.
func (m *MockUserRepository) DeleteUserByID(ctx context.Context, userID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUserByID", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUserByID indicates an expected call of DeleteUserByID.
func (mr *MockUserRepositoryMockRecorder) DeleteUserByID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUserByID", reflect.TypeOf((*MockUserRepository)(nil).DeleteUserByID), ctx, userID)
}

// GetCurrentUserRole mocks base method.
func (m *MockUserRepository) GetCurrentUserRole(ctx context.Context, tx *sqlx.Tx, userID uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentUserRole", ctx, tx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentUserRole indicates an expected call of GetCurrentUserRole.
func (mr *MockUserRepositoryMockRecorder) GetCurrentUserRole(ctx, tx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentUserRole", reflect.TypeOf((*MockUserRepository)(nil).GetCurrentUserRole), ctx, tx, userID)
}

// GetEmailByUserID mocks base method.
func (m *MockUserRepository) GetEmailByUserID(ctx context.Context, userId uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEmailByUserID", ctx, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEmailByUserID indicates an expected call of GetEmailByUserID.
func (mr *MockUserRepositoryMockRecorder) GetEmailByUserID(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEmailByUserID", reflect.TypeOf((*MockUserRepository)(nil).GetEmailByUserID), ctx, userId)
}

// GetFilteredEmployeesWithAssets mocks base method.
func (m *MockUserRepository) GetFilteredEmployeesWithAssets(ctx context.Context, filter EmployeeFilter) ([]EmployeeResponseModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFilteredEmployeesWithAssets", ctx, filter)
	ret0, _ := ret[0].([]EmployeeResponseModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFilteredEmployeesWithAssets indicates an expected call of GetFilteredEmployeesWithAssets.
func (mr *MockUserRepositoryMockRecorder) GetFilteredEmployeesWithAssets(ctx, filter interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFilteredEmployeesWithAssets", reflect.TypeOf((*MockUserRepository)(nil).GetFilteredEmployeesWithAssets), ctx, filter)
}

// GetFirebase mocks base method.
func (m *MockUserRepository) GetFirebase() providers.FirebaseProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirebase")
	ret0, _ := ret[0].(providers.FirebaseProvider)
	return ret0
}

// GetFirebase indicates an expected call of GetFirebase.
func (mr *MockUserRepositoryMockRecorder) GetFirebase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirebase", reflect.TypeOf((*MockUserRepository)(nil).GetFirebase))
}

// GetUserAssetTimeline mocks base method.
func (m *MockUserRepository) GetUserAssetTimeline(ctx context.Context, userID uuid.UUID) ([]UserTimelineRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserAssetTimeline", ctx, userID)
	ret0, _ := ret[0].([]UserTimelineRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserAssetTimeline indicates an expected call of GetUserAssetTimeline.
func (mr *MockUserRepositoryMockRecorder) GetUserAssetTimeline(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserAssetTimeline", reflect.TypeOf((*MockUserRepository)(nil).GetUserAssetTimeline), ctx, userID)
}

// GetUserByEmail mocks base method.
func (m *MockUserRepository) GetUserByEmail(ctx context.Context, userEmail string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, userEmail)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockUserRepositoryMockRecorder) GetUserByEmail(ctx, userEmail interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockUserRepository)(nil).GetUserByEmail), ctx, userEmail)
}

// GetUserDashboardById mocks base method.
func (m *MockUserRepository) GetUserDashboardById(ctx context.Context, userID uuid.UUID) (UserDashboardRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserDashboardById", ctx, userID)
	ret0, _ := ret[0].(UserDashboardRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserDashboardById indicates an expected call of GetUserDashboardById.
func (mr *MockUserRepositoryMockRecorder) GetUserDashboardById(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserDashboardById", reflect.TypeOf((*MockUserRepository)(nil).GetUserDashboardById), ctx, userID)
}

// GetUserRoleById mocks base method.
func (m *MockUserRepository) GetUserRoleById(ctx context.Context, userId uuid.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRoleById", ctx, userId)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRoleById indicates an expected call of GetUserRoleById.
func (mr *MockUserRepositoryMockRecorder) GetUserRoleById(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRoleById", reflect.TypeOf((*MockUserRepository)(nil).GetUserRoleById), ctx, userId)
}

// InsertIntoUser mocks base method.
func (m *MockUserRepository) InsertIntoUser(ctx context.Context, tx *sqlx.Tx, username, email, firebasetoken string) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoUser", ctx, tx, username, email, firebasetoken)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertIntoUser indicates an expected call of InsertIntoUser.
func (mr *MockUserRepositoryMockRecorder) InsertIntoUser(ctx, tx, username, email, firebasetoken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoUser", reflect.TypeOf((*MockUserRepository)(nil).InsertIntoUser), ctx, tx, username, email, firebasetoken)
}

// InsertIntoUserRole mocks base method.
func (m *MockUserRepository) InsertIntoUserRole(ctx context.Context, tx *sqlx.Tx, userId uuid.UUID, role string, createdBy uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoUserRole", ctx, tx, userId, role, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIntoUserRole indicates an expected call of InsertIntoUserRole.
func (mr *MockUserRepositoryMockRecorder) InsertIntoUserRole(ctx, tx, userId, role, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoUserRole", reflect.TypeOf((*MockUserRepository)(nil).InsertIntoUserRole), ctx, tx, userId, role, createdBy)
}

// InsertIntoUserType mocks base method.
func (m *MockUserRepository) InsertIntoUserType(ctx context.Context, tx *sqlx.Tx, userId uuid.UUID, employeeType string, createdBy uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertIntoUserType", ctx, tx, userId, employeeType, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertIntoUserType indicates an expected call of InsertIntoUserType.
func (mr *MockUserRepositoryMockRecorder) InsertIntoUserType(ctx, tx, userId, employeeType, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertIntoUserType", reflect.TypeOf((*MockUserRepository)(nil).InsertIntoUserType), ctx, tx, userId, employeeType, createdBy)
}

// InsertUserRole mocks base method.
func (m *MockUserRepository) InsertUserRole(ctx context.Context, tx *sqlx.Tx, userID uuid.UUID, role string, createdBy uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUserRole", ctx, tx, userID, role, createdBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUserRole indicates an expected call of InsertUserRole.
func (mr *MockUserRepositoryMockRecorder) InsertUserRole(ctx, tx, userID, role, createdBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUserRole", reflect.TypeOf((*MockUserRepository)(nil).InsertUserRole), ctx, tx, userID, role, createdBy)
}

// IsUserExists mocks base method.
func (m *MockUserRepository) IsUserExists(ctx context.Context, tx *sqlx.Tx, email string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserExists", ctx, tx, email)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUserExists indicates an expected call of IsUserExists.
func (mr *MockUserRepositoryMockRecorder) IsUserExists(ctx, tx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserExists", reflect.TypeOf((*MockUserRepository)(nil).IsUserExists), ctx, tx, email)
}

// UpdateEmployeeInfo mocks base method.
func (m *MockUserRepository) UpdateEmployeeInfo(ctx context.Context, req UpdateEmployeeReq, adminUUID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmployeeInfo", ctx, req, adminUUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmployeeInfo indicates an expected call of UpdateEmployeeInfo.
func (mr *MockUserRepositoryMockRecorder) UpdateEmployeeInfo(ctx, req, adminUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmployeeInfo", reflect.TypeOf((*MockUserRepository)(nil).UpdateEmployeeInfo), ctx, req, adminUUID)
}

// UpdateUserRole mocks base method.
func (m *MockUserRepository) UpdateUserRole(ctx context.Context, tx *sqlx.Tx, userID uuid.UUID, newRole string, updatedBy uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRole", ctx, tx, userID, newRole, updatedBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRole indicates an expected call of UpdateUserRole.
func (mr *MockUserRepositoryMockRecorder) UpdateUserRole(ctx, tx, userID, newRole, updatedBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRole", reflect.TypeOf((*MockUserRepository)(nil).UpdateUserRole), ctx, tx, userID, newRole, updatedBy)
}
